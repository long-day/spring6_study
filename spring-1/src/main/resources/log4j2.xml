<?xml version="1.0" encoding="UTF-8"?>
<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
<!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出-->
<!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数-->
<configuration status="WARN" monitorInterval="600">
    <!-- 全局变量，通过${name}引用该变量 -->
    <Properties>
        <!-- 日志打印路径 -->
        <Property name="LOG_HOME">logs</Property>
        <!-- 日志针对的项目名称 -->
        <Property name="APP_NAME">spring6</Property>

        <Property name="charStyle" value="UTF-8"/>
        <!-- 历史日志打印路径 -->
        <Property name="HISTORY_LOG_HOME">${LOG_HOME}/history</Property>
        <!-- 格式一: 统一日志打印格式：2020-07-01 21:14:48, 987 [main] [INFO] [com.fc.asset.FcAssetApplication] [FcAssetApplication.java:15] - message -->
        <Property name="LOG_PATTERN"
                  value="%date{yyyy-MM-dd HH:mm:ss, SSS} [%thread] [%-5level] [%logger{36}] [%file:%line] - %msg%n"/>
        <!--终端日志输出格式-->
        <Property name="CONSOLE_PATTERN_LAYOUT" value="[%d{HH:mm:ss}] [%p] - %l - %m%n"/>
        <!--文件日志输出格式-->
        <Property name="FILE_PATTERN_LAYOUT" value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"/>
        <!--日志文件最大大小阈值 -->
        <Property name="MAX_FILE_SIZE" value="30 MB"/>

    </Properties>

    <!--先定义所有的appender-->
    <appenders>
        <!--这个输出控制台的配置-->
        <console name="Console" target="SYSTEM_OUT">
            <PatternLayout charset="${charStyle}" pattern="${CONSOLE_PATTERN_LAYOUT}"/>
        </console>

        <!--用于测试  文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，这个也挺有用的，适合临时测试用-->
        <File name="testLog" fileName="${LOG_HOME}/${APP_NAME}/developing-env/test.log" append="false">
            <PatternLayout pattern="${FILE_PATTERN_LAYOUT}"/>
        </File>

        <!-- 这个会打印出所有的info及以上级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
        <RollingFile name="RollingFileInfo" fileName="${LOG_HOME}/${APP_NAME}/info.log"
                     filePattern="${LOG_HOME}/${APP_NAME}/${date:yyyy-MM}/info-%d{yyyy-MM-dd}-${APP_NAME}-%i.log">
            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${FILE_PATTERN_LAYOUT}"/>
            <Policies>
                <TimeBasedTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="${MAX_FILE_SIZE}"/>
            </Policies>
        </RollingFile>

        <RollingFile name="RollingFileWarn" fileName="${LOG_HOME}/${APP_NAME}/warn.log"
                     filePattern="${LOG_HOME}/${APP_NAME}/${date:yyyy-MM}/warn-%d{yyyy-MM-dd}-%i.log">
            <ThresholdFilter level="warn" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${FILE_PATTERN_LAYOUT}"/>
            <Policies>
                <TimeBasedTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="${MAX_FILE_SIZE}"/>
            </Policies>
            <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件，这里设置了20 -->
            <DefaultRolloverStrategy max="20"/>
        </RollingFile>
        <RollingFile name="RollingFileError" fileName="${LOG_HOME}/${APP_NAME}/error.log"
                     filePattern="${LOG_HOME}/${APP_NAME}/${date:yyyy-MM}/error-%d{yyyy-MM-dd}-%i.log">
            <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${FILE_PATTERN_LAYOUT}"/>
            <Policies>
                <TimeBasedTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="${MAX_FILE_SIZE}"/>
            </Policies>
        </RollingFile>
    </appenders>
    <!--然后定义logger，只有定义了logger并引入的appender，appender才会生效-->
    <loggers>
        <!--过滤掉spring和mybatis的一些无用的DEBUG信息 -->
        <logger name="org.springframework" level="INFO"/>
        <logger name="org.mybatis" level="INFO"/>

        <!--root 标签的logger会被所有log所继承，即：root的logger等级是(最)高级logger -->
        <root level="all">
            <appender-ref ref="Console"/>
            <appender-ref ref="testLog"/>
            <!--<appender-ref ref="RollingFileInfo"/>-->
            <!--<appender-ref ref="RollingFileWarn"/>-->
            <!--<appender-ref ref="RollingFileError"/>-->
        </root>
        <!--
        关于logger继承，除了root和普通logger标签以外，还有一种包所属关系继承。即:针对子包的logger自动继承其父包logger
        <logger name="edu.longday.logger" level="INFO">
            <appender-ref ref="Console"/>
        </logger>

        <logger name="edu.longday.logger.LoggerUtil" level="INFO">
            <appender-ref ref="Console"/>
        </logger>

        -->

    </loggers>
</configuration>
